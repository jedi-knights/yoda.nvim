-- lua/yoda/core/io.lua
-- Unified I/O facade - delegates to focused modules for perfect cohesion
-- Maintains backwards compatibility while ensuring single responsibility

local M = {}

-- Import focused modules
local filesystem = require("yoda.core.filesystem")
local json = require("yoda.core.json")
local temp = require("yoda.core.temp")

-- Export focused modules for direct access
M.filesystem = filesystem
M.json = json
M.temp = temp

-- ============================================================================
-- FILESYSTEM OPERATIONS (delegate to filesystem.lua)
-- ============================================================================

--- Check if file exists and is readable
--- @param path string File path
--- @return boolean
function M.is_file(path)
  return filesystem.is_file(path)
end

--- Check if directory exists
--- @param path string Directory path
--- @return boolean
function M.is_dir(path)
  return filesystem.is_dir(path)
end

--- Check if path exists (file or directory)
--- @param path string Path to check
--- @return boolean
function M.exists(path)
  return filesystem.exists(path)
end

--- Legacy compatibility for utils.file_exists
--- @param path string File path
--- @return boolean
function M.file_exists(path)
  return filesystem.file_exists(path)
end

--- Read file content safely
--- @param path string File path
--- @return boolean success
--- @return string|nil content or error message
function M.read_file(path)
  return filesystem.read_file(path)
end

-- ============================================================================
-- JSON OPERATIONS (delegate to json.lua)
-- ============================================================================

--- Parse JSON file (consolidates parse_json_config and load_json_config)
--- @param path string Path to JSON file
--- @return boolean success
--- @return table|string result or error message
function M.parse_json_file(path)
  return json.parse_file(path)
end

--- Write JSON file
--- @param path string File path
--- @param data table Data to write
--- @return boolean success
--- @return string|nil error message
function M.write_json_file(path, data)
  return json.write_file(path, data)
end

-- ============================================================================
-- TEMPORARY FILES (delegate to temp.lua)
-- ============================================================================

--- Create temporary file with content
--- @param content string File content
--- @return string|nil path Temporary file path or nil on failure
--- @return string|nil error Error message if failed
function M.create_temp_file(content)
  return temp.create_file(content)
end

--- Create temporary directory
--- @return string|nil path Temporary directory path or nil on failure
--- @return string|nil error Error message if failed
function M.create_temp_dir()
  return temp.create_dir()
end

return M
