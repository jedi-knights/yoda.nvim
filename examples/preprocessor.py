#!/usr/bin/env python3
"""
Example Test Preprocessor Script for Yoda.nvim

This script demonstrates how to create a preprocessor that integrates with 
the Yoda.nvim test picker. The test picker will run this script instead of 
pytest directly when it exists in your project root.

Command-line Arguments from Test Picker:
- -e, --environment: Selected environment (qa, prod, etc.)
- -r, --region: Selected region (auto, us-east, etc.)
- -m, --markers: Selected pytest markers
- --allure: Flag to enable Allure report generation

Usage:
1. Copy this file to your project root as 'preprocessor.py'
2. Install click: pip install click
3. Make it executable: chmod +x preprocessor.py
4. Customize the preprocessing logic below
5. The test picker will automatically use it instead of direct pytest

Example command generated by test picker:
python preprocessor.py -e qa -r auto -m bdd --allure
"""

import click
import os
import subprocess
import sys
from pathlib import Path


def setup_test_environment(environment, region, markers):
    """
    Perform any preprocessing steps before running tests.
    
    Examples of what you might do here:
    - Set up test databases
    - Configure API endpoints based on environment
    - Generate test data
    - Set up mock services
    - Configure logging levels
    """
    print(f"Setting up test environment for {environment} ({region})")
    
    # Example: Set additional environment variables based on test config
    if environment == "qa":
        os.environ["API_BASE_URL"] = "https://api-qa.example.com"
        os.environ["DATABASE_URL"] = "postgresql://test:test@localhost:5432/qa_db"
    elif environment == "prod":
        os.environ["API_BASE_URL"] = "https://api.example.com"
        os.environ["DATABASE_URL"] = "postgresql://test:test@localhost:5432/prod_db"
    
    # Example: Region-specific configuration
    if region == "us-east":
        os.environ["AWS_DEFAULT_REGION"] = "us-east-1"
    elif region == "us-west":
        os.environ["AWS_DEFAULT_REGION"] = "us-west-2"
    
    # Example: Setup test fixtures or mock data
    if markers and "integration" in markers:
        print("Setting up integration test environment...")
        # Setup integration test prerequisites
    
    print("Environment setup complete.")


def build_pytest_command(markers, allure):
    """Build the pytest command with appropriate arguments."""
    # Determine pytest executable (use virtual env if available)
    venv = os.environ.get("VIRTUAL_ENV")
    if venv:
        pytest_cmd = os.path.join(venv, "bin", "pytest")
    else:
        pytest_cmd = "pytest"
    
    # Build command arguments
    cmd = [pytest_cmd, "--tb=short", "-v"]
    
    # Add markers if specified
    if markers:
        cmd.extend(["-m", markers])
    
    # Add allure report if requested
    if allure:
        cmd.append("--alluredir=allure-results")
    
    return cmd


def cleanup_test_environment(allure):
    """Cleanup after tests complete."""
    print("\nCleaning up test environment...")
    
    # Example cleanup tasks:
    # - Tear down test databases
    # - Clean up temporary files
    # - Reset mock services
    # - Generate test reports
    
    if allure and Path("allure-results").exists():
        print("Allure results generated in: allure-results/")
        print("To view report: allure serve allure-results")


@click.group()
def cli():
    """Test preprocessor with multiple commands."""
    pass


@cli.command()
@click.option("-e", "--environment", default="qa", help="Test environment (qa, prod, etc.)")
@click.option("-r", "--region", default="auto", help="Test region (auto, us-east, us-west, etc.)")
@click.option("-m", "--markers", default="", help="Pytest markers to run")
@click.option("--allure", is_flag=True, help="Generate Allure report")
def process(environment, region, markers, allure):
    """Process tests with the given configuration."""
    print("=" * 60)
    print("TEST PREPROCESSOR")
    print("=" * 60)
    
    print(f"Environment: {environment}")
    print(f"Region: {region}")
    print(f"Markers: {markers or 'None'}")
    print(f"Allure Report: {'Yes' if allure else 'No'}")
    print(f"Virtual Env: {os.environ.get('VIRTUAL_ENV', 'System Python')}")
    print("=" * 60)
    print()
    
    try:
        # Perform preprocessing
        setup_test_environment(environment, region, markers)
        
        # Build and execute pytest command
        cmd = build_pytest_command(markers, allure)
        print(f"Executing: {' '.join(cmd)}")
        print()
        
        # Run pytest
        result = subprocess.run(cmd, check=False)
        
        # Cleanup (if needed)
        cleanup_test_environment(allure)
        
        # Exit with same code as pytest
        sys.exit(result.returncode)
        
    except Exception as e:
        print(f"Error in preprocessor: {e}")
        sys.exit(1)


if __name__ == "__main__":
    cli()